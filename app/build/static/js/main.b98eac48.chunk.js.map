{"version":3,"sources":["components/List.js","components/ListContainer.js","components/AddTaskButton.js","components/AddTaskModal.js","utils/listService.js","utils/itemService.js","components/ConfirmDeleteTaskModal.js","App.js","serviceWorker.js","index.js"],"names":["List","this","props","list","listId","id","name","items","className","map","item","idx","key","description","onClick","stageForDeletion","Component","ListContainer","lists","reversedLists","i","length","push","AddTaskButton","hideOrShow","AddTaskModal","state","selectedList","otherListNames","taskInput","modalSlide","loadSelectedList","setState","slideOutOrIn","outArr","inArr","forEach","document","getElementById","classList","remove","add","changeHeadingTo","text","innerText","getInputVal","value","setSelectedList","updateOtherLists","chooseList","setTimeout","handleChange","submitTask","e","a","preventDefault","task","addTaskToList","resetModal","componentDidMount","componentDidUpdate","modalSlideOne","toggle","modalSlideTwo","onSubmit","type","onChange","getAllLists","fetch","then","res","json","data","itemsFromDB","addTaskToDB","method","headers","Headers","body","JSON","stringify","ok","Error","removeTaskFromDB","itemId","ConfirmDeleteTaskModal","cancelStageForDeletion","deleteTaskFromList","App","isDataLoaded","deleteTaskListId","deleteTaskItemId","hideArr","showArr","newTask","taskId","filter","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b98eac48.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './scss/List.scss';\n\nclass List extends Component {\n  render() {\n    const {id: listId, name, items} = this.props.list;\n    return (\n      <div className='List'>\n        <div className='List-name'>{name}</div>\n        <ul className='List-item-ctnr'>\n        {items.map((item, idx) => (\n          <li \n            key={idx}\n            className='List-item'\n          >\n            <div \n              className='List-item-check'\n            >\n              &#10003;\n            </div>\n            <span \n              className='List-item-txt'\n            >\n              {item.description}\n            </span>\n            <div \n              className='List-item-x'\n              onClick={() => this.props.stageForDeletion(listId, item.id)}\n            >\n              X\n            </div>\n          </li>\n        ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React from 'react';\nimport './scss/ListContainer.scss';\nimport List from './List';\n\nconst ListContainer = ({ lists, stageForDeletion }) => {\n  let reversedLists = [];\n  for (let i = lists.length - 1; i >= 0; i--) {\n    reversedLists.push(\n      <List \n        key={i} \n        list={lists[i]}\n        stageForDeletion={stageForDeletion}\n      />\n    );\n  }\n  return (\n    <div className='ListContainer'>\n      {reversedLists}\n    </div>\n  );\n};\n\nexport default ListContainer;\n","import React from 'react';\nimport './scss/AddTaskButton.scss';\n\nconst AddTaskButton = (props) => {\n  return (\n    <>\n      <button \n        className='purple-btn'\n        onClick={() => props.hideOrShow([], ['addTaskModal'])}\n      >\n        Add a Task\n      </button>\n    </>\n  );\n};\n\nexport default AddTaskButton;\n","import React, { Component } from 'react';\nimport './scss/AddTaskModal.scss';\n\nclass AddTaskModal extends Component {\n  state = {\n    selectedList: null,\n    otherListNames: [],\n    taskInput: '',\n    modalSlide: 1\n  }\n\n  loadSelectedList = () => {\n    const lists = this.props.lists;\n    if (lists.length) {\n      this.setState({ \n        selectedList: lists[lists.length - 1]\n      });\n    }\n  }\n\n  slideOutOrIn = (outArr, inArr) => {\n    outArr.length\n      && outArr.forEach(id => {\n        document.getElementById(id).classList.remove('slide-in');\n        document.getElementById(id).classList.add('slide-out');\n      });\n    inArr.length\n      && inArr.forEach(id => {\n        document.getElementById(id).classList.remove('slide-out');\n        document.getElementById(id).classList.add('slide-in');\n      });\n  }\n\n  changeHeadingTo = (text) => {\n    document.getElementById('AddTaskModal-heading').innerText = text;\n  }\n\n  getInputVal = () => document.getElementById('AddTaskModal-task-input').value;\n\n  setSelectedList = (list) => {\n    let selectedList = list;\n    this.props.hideOrShow(['AddTaskModal-other-lists'], []);\n    this.updateOtherLists(selectedList);\n    this.setState({ selectedList });\n  }\n\n  updateOtherLists = (selectedList) => {\n    const lists = this.props.lists;\n    let otherListNames = [];\n    for (let i = lists.length - 1; i >= 0; i--) {\n      if (lists[i].name === selectedList.name) continue;\n      otherListNames.push(\n        <div \n          key={lists[i].name}\n          className='AddTaskModal-other-list'\n          onClick={() => this.setSelectedList(lists[i])}\n        >\n          {lists[i].name}\n        </div>\n      );\n    }\n    this.setState({ otherListNames });\n  }\n\n  chooseList = () => {\n    this.slideOutOrIn(['AddTaskModal-heading', 'AddTaskModal-list-selecter', 'AddTaskModal-choose-list-btn'], []);\n    setTimeout(() => {\n      this.props.hideOrShow([\n        'AddTaskModal-list-selecter', \n        'AddTaskModal-choose-list-btn'\n      ], [\n        'AddTaskModal-task-input-form'\n      ]);\n      this.changeHeadingTo('What you need to do');\n      this.slideOutOrIn([], ['AddTaskModal-heading', 'AddTaskModal-task-input-form']);\n    }, 500);\n    this.setState({ modalSlide: 2 });\n  }\n\n  handleChange = () => {\n    let taskInput = this.getInputVal();\n    this.setState({ taskInput });\n  }\n\n  submitTask = async (e) => {\n    e.preventDefault();\n    let listId = this.state.selectedList.id;\n    let task = this.getInputVal();\n    await this.props.addTaskToList(listId, task);\n    this.resetModal();\n  }\n\n  resetModal = () => {\n    let taskInput = '';\n    let modalSlide = 1;\n    this.props.hideOrShow([\n      'addTaskModal', \n      'AddTaskModal-task-input-form'\n    ], [\n      'AddTaskModal-list-selecter', \n      'AddTaskModal-choose-list-btn',\n    ]);\n    this.changeHeadingTo('Which list?');\n    document.getElementById('AddTaskModal-other-lists').classList.add('hidden');\n    this.slideOutOrIn([], ['AddTaskModal-heading', 'AddTaskModal-list-selecter', 'AddTaskModal-choose-list-btn']);\n    this.setState({ taskInput, modalSlide });\n  }\n\n  componentDidMount = () => {\n    this.loadSelectedList();\n  }\n\n  componentDidUpdate = () => {\n    let selectedList = this.state.selectedList;\n    selectedList\n      && !this.state.otherListNames.length \n      && this.updateOtherLists(selectedList);\n  }\n\n  render() {\n    const modalSlideOne = (\n      <>\n        <div\n          id='AddTaskModal-list-selecter'\n          className='AddTaskModal-list-selecter-btn slide-in'\n        >\n          <div \n            id='AddTaskModal-selected-list'\n            className='AddTaskModal-selected-list'\n            onClick={() => \n              document.getElementById('AddTaskModal-other-lists')\n                .classList.toggle('hidden')}\n          >\n            {this.state.selectedList ? this.state.selectedList.name : 'Loading lists...'}\n            <div \n              className='AddTaskModal-arrow-down'\n            />\n          </div>\n          <div \n            id='AddTaskModal-other-lists'\n            className='AddTaskModal-other-lists hidden'\n          >\n            {this.state.otherListNames}\n          </div>\n        </div>\n        <button\n          id='AddTaskModal-choose-list-btn'\n          className='purple-btn slide-in'\n          onClick={this.chooseList}\n        >\n          Choose This List\n        </button>\n      </>\n    );\n\n    const modalSlideTwo = (\n      <form \n        id='AddTaskModal-task-input-form'\n        className='AddTaskModal-task-input-form hidden'\n        onSubmit={this.submitTask}\n      >\n        <input \n          id='AddTaskModal-task-input'\n          className='AddTaskModal-task-input' \n          type='text' \n          onChange={this.handleChange}\n          value={this.state.taskInput}\n        />\n        <button \n          type='submit'\n          className='purple-btn'\n        >\n          Add task to {this.state.selectedList ? this.state.selectedList.name : null}\n        </button>\n      </form>\n    );\n\n    return (\n      <div \n        id='addTaskModal'\n        className='AddTaskModal hidden'\n      >\n        <button \n          className='purple-btn align-flex-end'\n          onClick={this.resetModal}\n        >\n          X\n        </button>\n        <h1 \n          id='AddTaskModal-heading'\n          className='AddTaskModal-heading slide-in'\n        >\n          Which list?\n        </h1>\n        {modalSlideOne}\n        {modalSlideTwo}\n      </div>\n    );\n  }\n}\n\nexport default AddTaskModal;\n","const getAllLists = () => {\n  return fetch('/api/lists').then(async res => {\n    let data = await res.json();\n    let lists = data.lists;\n    for (let i = 0; i < lists.length; i++) {\n      let itemsFromDB = await fetch(`/api/lists/${lists[i].id}/items`).then(res => res.json());\n      lists[i].items = itemsFromDB.items;\n    }\n    return lists;\n  });\n}\n\nexport {\n  getAllLists\n}","const getListItems = (listId) => fetch(`/api/list/${listId}/items`).then(res => res.json());\n\nconst addTaskToDB = async (listId, description) => {\n  return await fetch(`/api/lists/${listId}/add_item`, {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify({ description })\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Error creating task!');\n  });\n}\n\nconst removeTaskFromDB = async (listId, itemId) => {\n  return await fetch(`/api/lists/${listId}/items/${itemId}`, {\n    method: 'DELETE',\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Error deleting task!');\n  });\n}\n\nexport {\n  getListItems,\n  addTaskToDB,\n  removeTaskFromDB\n}","import React from 'react';\nimport './scss/ConfirmDeleteTaskModal.scss';\n\nconst ConfirmDeleteTaskModal = ({ listId, itemId, cancelStageForDeletion, deleteTaskFromList }) => {\n  return (\n    <div \n      id='ConfirmDeleteTaskModal'\n      className='ConfirmDeleteTaskModal hidden'\n    >\n      <button \n        className='purple-btn align-flex-end slide-in'\n        onClick={cancelStageForDeletion}\n      >\n        X\n      </button>\n      <h1 \n        className='ConfirmDeleteTaskModal-heading slide-in'\n      >\n        Are you sure you want to delete this item?\n      </h1>\n      <button\n        className='purple-btn slide-in'\n        onClick={() => deleteTaskFromList(listId, itemId)}\n      >\n        DELETE\n      </button>\n    </div>\n  );\n};\n\nexport default ConfirmDeleteTaskModal;\n","import React, { Component } from 'react';\nimport './scss/App.scss';\nimport ListContainer from './components/ListContainer';\nimport AddTaskButton from './components/AddTaskButton';\nimport AddTaskModal from './components/AddTaskModal';\nimport { getAllLists } from './utils/listService';\nimport { addTaskToDB, removeTaskFromDB } from './utils/itemService';\nimport ConfirmDeleteTaskModal from './components/ConfirmDeleteTaskModal';\n\nclass App extends Component {\n  state = {\n    lists: [],\n    isDataLoaded: false,\n    deleteTaskListId: null,\n    deleteTaskItemId: null\n  }\n\n  hideOrShow = (hideArr, showArr) => {\n    hideArr.length\n      && hideArr.forEach(id => \n        document.getElementById(id).classList.add('hidden'));\n    showArr.length\n      && showArr.forEach(id => \n        document.getElementById(id).classList.remove('hidden'));\n  }\n\n  addTaskToList = async (listId, task) => {\n    let newTask = await addTaskToDB(listId, task);\n    let lists = this.state.lists.map(list => {\n      list.id === listId && list.items.push(newTask);\n      return list;\n    });\n    this.setState({ lists });\n  }\n\n  stageForDeletion = (deleteTaskListId, deleteTaskItemId) => {\n    this.setState({\n      deleteTaskListId, \n      deleteTaskItemId \n    });\n    this.hideOrShow([], ['ConfirmDeleteTaskModal']);\n  }\n\n  cancelStageForDeletion = () => {\n    this.setState({\n      deleteTaskListId: null, \n      deleteTaskItemId: null\n    });\n    this.hideOrShow(['ConfirmDeleteTaskModal'], []);\n  }\n\n  deleteTaskFromList = async (listId, taskId) => {\n    await removeTaskFromDB(listId, taskId);\n    let lists = this.state.lists.map(list => {\n      if (list.id === listId) {\n        list.items = list.items.filter(item => item.id !== taskId);\n      }\n      return list;\n    });\n    this.setState({ deleteTaskListId: null, deleteTaskItemId: null, lists });\n    this.hideOrShow(['ConfirmDeleteTaskModal'], []);\n  }\n\n  componentDidMount = async () => {\n    let lists = await getAllLists();\n    let isDataLoaded = true;\n    this.setState({ lists, isDataLoaded });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n      {this.state.isDataLoaded ? (\n        <>\n          <AddTaskButton \n            hideOrShow={this.hideOrShow}\n          />\n          <AddTaskModal \n            lists={this.state.lists} \n            hideOrShow={this.hideOrShow}\n            addTaskToList={this.addTaskToList}\n          />\n          <ConfirmDeleteTaskModal \n            listId={this.state.deleteTaskListId}\n            itemId={this.state.deleteTaskItemId}\n            cancelStageForDeletion={this.cancelStageForDeletion}\n            deleteTaskFromList={this.deleteTaskFromList}\n          />\n          <ListContainer \n            lists={this.state.lists} \n            stageForDeletion={this.stageForDeletion}\n          />\n        </>\n      ) : (\n        <div className='loader'>\n          <div className='loader-inner loader-one' />\n          <div className='loader-inner loader-two' />\n          <div className='loader-inner loader-three' />\n        </div>\n      )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}